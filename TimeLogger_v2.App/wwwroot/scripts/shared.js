import{dateFormatter}from"./common.js";let templateAlert='<div class="alert" v-bind:class="getAlertClass" v-if="message">{{ message }}</div>';export const AlertComponent={props:["message","type"],computed:{getAlertClass:function(){return"alert--"+(this.type||"danger")}},template:templateAlert};let templateDateNavigator='<nav class="date__nav">    <input type="date" name="tbDate" class="date__nav--picker" v-model="selectedDate" v-on:change="$emit(\'date-change\', selectedDate)" /></nav>';export const DateNavigatorComponent={data:()=>({selectedDate:dateFormatter.toIsoDate(new Date)}),props:["type"],template:templateDateNavigator};let templateDropDownSelector='<section class="dd dd-pos-right">    <label for="view-selector" class="dd--label">{{label}}:</label>    <select name="view-selector" class="ctrl ctrl-inline dd--select" v-model="selectedValue">\t     <option v-for="option in options" class="dd--option" :value="option.value" :selected="option.value == selectedValue">{{option.text}}</option>    </select></section>';export const DropDownSelectorComponent={data:()=>({selectedValue:""}),props:{label:String,options:Array},created(){let e=this;e.options&&(e.selectedValue=e.options[0].value)},template:templateDropDownSelector};let templateRangeNavigator='<nav class="range__nav">  <div class="range__nav--item">\t <label for="tbDateFrom">From</label>\t <input type="date" name="tbDateFrom" class="date__nav--picker" v-model="selectedDateFrom" v-on:change="$emit(\'range-change\', selectedDateFrom, selectedDateTo)" />  </div>  <div class="range__nav--item">\t <label for="tbDateFrom">To</label>\t <input type="date" name="tbDateTo" class="date__nav--picker" v-model="selectedDateTo" v-on:change="$emit(\'range-change\', selectedDateFrom, selectedDateTo)" />  </div></nav>';export const RangeNavigatorComponent={data:()=>({selectedDateFrom:dateFormatter.toIsoDate((new Date).addDays(-7)),selectedDateTo:dateFormatter.toIsoDate(new Date)}),props:["type"],template:templateRangeNavigator};let templateTableComponent='<table class="table">  <thead v-if="columns && columns.length > 0">    <th class="table__col" :class="{ \'table__col--duration\': column.type == \'DURATION\', \'table__col--time\': column.type == \'TIME\' }"       v-for="column in columns">{{column.name}}</th>    <th class="table__col table__col--actions" v-if="rowActions && rowActions.length > 0">Actions</th>  </thead>  <tbody v-if="values && values.length > 0">    <tr v-for="value in values">      <td class="table__col" :class="{ \'table__col--duration\': column.type == \'DURATION\', \'table__col--time\': column.type == \'TIME\'  }"         v-for="column in columns">{{ this.getColValue(column, value) }}        <ul class="summary__details" v-if="displayDetails">          <li v-for="entry in value.entries" class="summary__details--item">{{ this.getColDetailsValue(column, entry) }}</li>        </ul>      </td>      <td class="table__col table__col--actions" v-if="rowActions && rowActions.length > 0" >        <template v-for="action in rowActions">          <a href="#" class="btn btn--sm btn--stack" :class="{\'btn--secondary\': action.style == \'secondary\'}" :title="action.name"             v-if="action.visible && value.actions.indexOf(action.name) != -1" v-on:click.prevent="$emit(\'action-clicked\', action.name, value.id)">            <i class="icon" :class="\'action__\' + action.name.toLowerCase()"></i>          </a>        </template>      </td>    </tr>  </tbody>   <tbody v-else>    <tr class="table__row--empty"><td :colspan="getColCount" class="table__col">It is rather lonely in here :( ...</td></tr>  </tbody> </table>';export const TableComponent={props:["columns","displayDetails","idCol","rowActions","values"],data:()=>({}),computed:{getColCount:function(){let e=this.columns.length;return this.rowActions&&this.rowActions.length>0&&e++,e}},methods:{getColValue:function(e,t){let a=t[e.bindTo||e.name];return this.transformColValue(e,a)},getColDetailsValue:function(e,t){let a=t[e.detailsBindTo||e.bindTo||e.name];return this.transformColValue(e,a)},transformColValue:(e,t)=>(t&&e.transform&&(t=e.transform(t)),t)},template:templateTableComponent};